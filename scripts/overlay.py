#!/usr/bin/env python3

'''
This script adds labels to frames generated by the nviz.py script.
'''

import sys
import os
import math
from PIL import Image, ImageFont, ImageDraw
import cairo

in_file = sys.argv[1]
out_file = sys.argv[2]

sky_file = '/home/rob/Desktop/ec/videos/sky/20190824_122718.jpg'
font = '/usr/share/fonts/type1/gsfonts/p052003l.pfb'

def do_sky():
	sky = Image.open(sky_file).convert(mode = 'RGBA')
	im = Image.open(in_file).convert(mode = 'RGBA')

	ic, ir = im.size

	sky0 = sky.resize(im.size)

	idata = im.getdata()
	idata0 = []

	for r, g, b, a in idata:
		if r == 255 and g == 255 and b == 255:
			idata0.append((255, 255, 255, 0))
		else:
			idata0.append((r, g, b, 255))

	im.putdata(idata0)

	comp = Image.alpha_composite(sky0, im)
	comp.save(out_file, 'PNG')

def do_elev():

	f = os.path.basename(in_file).split('_')[0]
	e = int(round(float(f) / 100.)) / 100.
	print(e)
	img = Image.open(in_file)
	c, r = img.size
	draw = ImageDraw.Draw(img)
	font = ImageFont.truetype(font, 72)
	draw.text((r * .1 + 3, r - r * .1 + 3), '{e:.2f}m'.format(e = e), (0,0,0), font=font)
	draw.text((r * .1, r - r * .1), '{e:.2f}m'.format(e = e), (255,255,255), font=font)
	img.save(out_file)

def basin_panel(ctx, name, width, height, pad, colour):
	ctx.move_to(0, 0)
	ctx.rectangle(0, 0, width, height)
	ctx.set_source_rgba(1, 1, 1, 0.75)
	ctx.fill()
	ctx.rectangle(pad, pad, height - pad * 2, height - pad * 2)
	ctx.set_source_rgb(*colour)
	ctx.fill();
	ctx.rectangle(pad, pad, height - pad * 2, height - pad * 2)
	ctx.set_source_rgb(0, 0, 0)
	ctx.set_line_width(1)
	ctx.stroke()

	ctx.move_to(height, height / 2 + pad)
	ctx.set_font_size(24)
	ctx.set_source_rgb(0, 0, 0)
	ctx.show_text(name)

def elev_panel(ctx, name, elev, width, height, pad):
	ctx.move_to(0, 0)
	ctx.rectangle(0, 0, width, height)
	ctx.set_source_rgba(1, 1, 1, 0.75)
	ctx.fill()

	t = '{}: {:.2f}m'.format(name, elev)
	te = ctx.text_extent(t)

	ctx.move_to(height, width / 2 - tw.width / 2)
	ctx.set_font_size(24)
	ctx.set_source_rgb(0, 0, 0)
	ctx.show_text('{}: {:.2f}m'.format(name, elev))

def do_panel(infile, outfile):

	f = os.path.basename(infile)
	e = int(round(float(f[:7]) / 100.)) / 100.
	height = 50
	width = 300
	pad = 10

	panels = (
		('Horseshoe Slough', width, height, pad, (15./255., 153./255., 222./255.)),
		('Peace River', width, height, pad, (211./255., 14./255., 119./25.)),
		('Elevation', e, width, height, pad)
	)

	inimg = cairo.ImageSurface.create_from_png(infile)
	ctx = cairo.Context(inimg)

	ctx.translate(height / 2, inimg.get_height() - len(panels) * (height + pad) - height / 2)
	for i in range(len(panels)):
		if panels[i][0] == 'Elevation':
			elev_panel(ctx, *panels[i])
		else:
			basin_panel(ctx, *panels[i])
		ctx.translate(0, height + pad)

	inimg.write_to_png(outfile)

do_panel(in_file, out_file)